@using BlogWebSite.Client
@using Masa.Blazor
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode

<!DOCTYPE html>
<html lang="zh-cn">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="_content/Masa.Blazor/css/masa-blazor.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="css/app.css" />
    <link rel="stylesheet" href="BlogWebSite.styles.css" />
    <link href="css/materialdesign/v7.1.96/css/materialdesignicons.min.css" rel="stylesheet">
    <HeadOutlet @rendermode=rendermode />
    <MAppThemeStylesheet />
</head>

<body>
    <Routes @rendermode=rendermode />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/Masa.Blazor/js/masa-blazor.js"></script>
</body>

</html>

@code {
    readonly IComponentRenderMode rendermode = Program.UseWasm ? InteractiveAuto : InteractiveServer;

    // [Inject]
    // Client.RenderModes.IRenderMode IRenderMode { get; set; }
    // [Inject]
    // Masa.Blazor.LocalStorage MasaLS { get; set; }
    // [Inject]
    // Masa.Blazor.MasaBlazor MasaBlazor { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     await base.OnInitializedAsync();

    //     if (IRenderMode.IsWasm())
    //     {
    //         // wasm = "Is";
    //         await CheckTheme();
    //     }
    // }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {

    //     if (firstRender) // 只在第一次渲染后调用
    //     {
    //         if (IRenderMode.IsWasm() is false)
    //         {
    //             // server = "Is";
    //             await CheckTheme();
    //         }
    //     }

    //     await base.OnAfterRenderAsync(firstRender);
    // }

    // async Task CheckTheme()
    // {
    //     var themeName = (await MasaLS.GetItemAsync("masablazor@theme"));

    //     MasaBlazor.Theme.Dark = themeName is "dark";
    //     // MasaBlazor.SetTheme();

    //     // await InvokeAsync(StateHasChanged);

    //     // MasaBlazor.OnThemeChange += theme => InvokeAsync(StateHasChanged);
    // }
}